name: Sync
on:
  workflow_dispatch: {}
  schedule:
    - cron: "*/10 * * * *" # Runs every 10 minutes

jobs:
  sync:
    name: Sync With Upstream
    runs-on: warp-ubuntu-latest-x64-4x
    steps:
      - uses: actions/create-github-app-token@v1
        id: app-token
        with:
          app-id: ${{ secrets.APP_ID }}
          private-key: ${{ secrets.APP_PRIVATE_KEY }}

      - name: Checkout with GitHub App Token
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ steps.app-token.outputs.token }}

      - name: Get GitHub App User ID
        id: get-user-id
        run: echo "user-id=$(gh api "/users/${{ steps.app-token.outputs.app-slug }}[bot]" --jq .id)" >> "$GITHUB_OUTPUT"
        env:
          GH_TOKEN: ${{ steps.app-token.outputs.token }}
      - run: |
          git config --global user.name '${{ steps.app-token.outputs.app-slug }}[bot]'
          git config --global user.email '${{ steps.get-user-id.outputs.user-id }}+${{ steps.app-token.outputs.app-slug }}[bot]@users.noreply.github.com'

      - name: Sync with upstream repository
        run: |
          # Get the upstream repository URL from GitHub API
          REPO_NAME="${GITHUB_REPOSITORY}"
          UPSTREAM_INFO=$(gh api repos/$REPO_NAME | jq -r '.parent.clone_url // empty')

          if [ -z "$UPSTREAM_INFO" ]; then
            echo "This doesn't appear to be a fork or the API couldn't retrieve the parent repository"
            exit 1
          fi

          echo "Upstream repository: $UPSTREAM_INFO"

          # Check if upstream remote exists, add it if it doesn't
          if ! git remote | grep -q "^upstream$"; then
            git remote add upstream $UPSTREAM_INFO
          else
            git remote set-url upstream $UPSTREAM_INFO
          fi

          # Fetch from upstream including all branches
          git fetch upstream

          # Store current branch (typically main)
          CURRENT_BRANCH=$(git rev-parse --abbrev-ref HEAD)
          echo "Current branch: $CURRENT_BRANCH"

          # ----- Sync current branch -----
          echo "Syncing current branch: $CURRENT_BRANCH"

          # Merge upstream changes for current branch
          git merge upstream/$CURRENT_BRANCH --no-edit

          # Push changes to origin for current branch
          git push origin $CURRENT_BRANCH

          # ----- Sync develop branch -----
          # Check if upstream has a develop branch
          if git ls-remote --heads upstream develop | grep -q develop; then
            echo "Syncing develop branch"

            # First, fetch everything from origin as well to be up-to-date
            git fetch origin

            # Check if local develop branch exists
            if git show-ref --verify --quiet refs/heads/develop; then
              # Local develop branch exists, switch to it
              git checkout develop

              # Reset to origin/develop if it exists, otherwise to upstream/develop
              if git ls-remote --heads origin develop | grep -q develop; then
                echo "Resetting develop branch to origin/develop"
                git reset --hard origin/develop
              else
                echo "Resetting develop branch to upstream/develop"
                git reset --hard upstream/develop
              fi
            else
              # Create develop branch tracking upstream/develop
              git checkout -b develop upstream/develop
            fi

            # Merge upstream changes for develop branch
            git merge upstream/develop --no-edit

            # Push changes to origin for develop branch
            git push origin develop || {
              echo "Push failed. Attempting to resolve by force-pushing with --force-with-lease"
              # This is safer than a plain force push as it will only push if the remote branch hasn't been updated
              git push --force-with-lease origin develop
            }

            # Switch back to original branch
            git checkout $CURRENT_BRANCH
          else
            echo "Upstream does not have a develop branch. Skipping develop branch sync."
          fi

          echo "Sync complete for all branches"
        env:
          GITHUB_TOKEN: ${{ steps.app-token.outputs.token }}
          GH_TOKEN: ${{ steps.app-token.outputs.token }}
